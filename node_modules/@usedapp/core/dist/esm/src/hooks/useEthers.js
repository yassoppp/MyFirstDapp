import { useConfig, useNetwork } from '../providers';
import { useLocalStorage } from './useLocalStorage';
import { useReadonlyNetwork } from './useReadonlyProvider';
/**
 * @public
 */
export function useEthers() {
    const { network: { provider: networkProvider, chainId, accounts, errors }, deactivate, activate, activateBrowserWallet, isLoading, } = useNetwork();
    const [, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');
    const { networks } = useConfig();
    const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map((network) => network.chainId);
    const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;
    const unsupportedChainIdError = new Error(`Unsupported chain id: ${chainId}. Supported chain ids are: ${supportedChainIds}.`);
    unsupportedChainIdError.name = 'UnsupportedChainIdError';
    const error = isUnsupportedChainId ? unsupportedChainIdError : errors[errors.length - 1];
    const readonlyNetwork = useReadonlyNetwork();
    const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;
    const result = {
        connector: undefined,
        library: provider,
        chainId: isUnsupportedChainId ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,
        account: accounts[0],
        active: !!provider,
        activate: async (providerOrConnector) => {
            if ('getProvider' in providerOrConnector) {
                console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');
                await providerOrConnector.activate();
                return activate(await providerOrConnector.getProvider());
            }
            return activate(providerOrConnector);
        },
        deactivate: () => {
            deactivate();
            setShouldConnectMetamask(false);
        },
        setError: () => {
            throw new Error('setError is deprecated');
        },
        error,
        isLoading,
    };
    return Object.assign(Object.assign({}, result), { activateBrowserWallet });
}
//# sourceMappingURL=useEthers.js.map